# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g4rHCE1Buc0JUQlRHG2-670Go7iO7nrT
"""

# Install necessary libraries
!pip install torch transformers datasets soundfile google-cloud-texttospeech librosa
!pip install SpeechT5  # Placeholder; replace with the actual installation method for SpeechT5 if available

# Import libraries and set up the Google Cloud TTS client
from google.cloud import texttospeech
import os
import soundfile as sf

# Define the Google Cloud TTS client
client = texttospeech.TextToSpeechClient()

# Install necessary libraries
!pip install torch transformers datasets soundfile gtts librosa

from gtts import gTTS
import os
import numpy as np
import soundfile as sf

# Define Bengali sentences for generating synthetic audio
bengali_sentences = [
    "বাংলা ভাষা আমার মাতৃভাষা।",
    "আমরা সবাই বাঙালি।",
    "এই বিশ্বটা খুব সুন্দর।",
    "শিক্ষা জাতির মেরুদণ্ড।",
    "আমাদের ঐতিহ্য ও সংস্কৃতি অনেক প্রাচীন।"
]

# Function to synthesize and save TTS audio using gTTS
def synthesize_and_save(text, idx):
    tts = gTTS(text=text, lang='bn')
    filename = f"bengali_sample_{idx}.wav"  # Save as WAV format
    tts.save(filename)
    print(f"Audio content written to file {filename}")

# Generate audio samples
for idx, sentence in enumerate(bengali_sentences):
    synthesize_and_save(sentence, idx)

from datasets import Dataset

# Load the dataset (assuming the audio files are saved as WAV)
data = {
    "audio": [f"bengali_sample_{i}.wav" for i in range(len(bengali_sentences))],
    "text": bengali_sentences
}
dataset = Dataset.from_dict(data)

# Install necessary libraries
!pip install --upgrade torch transformers datasets soundfile gtts librosa

# Install Bark and its dependencies
!pip install git+https://github.com/suno-ai/bark.git
!pip install -U pyttsx3  # Text-to-speech conversion library

# Install Bark and its dependencies
!pip install git+https://github.com/suno-ai/bark.git

import os
import numpy as np
import torch
import torchaudio
from bark import generate_audio

# Define Bengali sentences for generating synthetic audio
bengali_sentences = [
    "বাংলা ভাষা আমার মাতৃভাষা।",
    "আমরা সবাই বাঙালি।",
    "এই বিশ্বটা খুব সুন্দর।",
    "শিক্ষা জাতির মেরুদণ্ড।",
    "আমাদের ঐতিহ্য ও সংস্কৃতি অনেক প্রাচীন।"
]

# Create the output directory if it doesn't exist
output_dir = "bengali_audio"
os.makedirs(output_dir, exist_ok=True)

# Generate audio for each sentence using Bark
for idx, sentence in enumerate(bengali_sentences):
    audio_file = os.path.join(output_dir, f"bengali_sample_{idx}.wav")

    # Generate audio from the text
    audio_array = generate_audio(sentence)

    # Convert to PyTorch tensor and save audio as a WAV file
    audio_tensor = torch.tensor(audio_array).unsqueeze(0)  # Add a channel dimension
    torchaudio.save(audio_file, audio_tensor, sample_rate=22050)
    print(f"Generated audio saved to {audio_file}")

# Example ratings collected from evaluators
ratings = [4, 5, 3, 4, 4, 2, 5]  # Example ratings; replace with actual ratings collected

# Calculate MOS
mos = sum(ratings) / len(ratings)
print(f"Mean Opinion Score (MOS): {mos:.2f}")

import pandas as pd

# Define Bengali sentences
bengali_sentences = [
    "বাংলা ভাষা আমার মাতৃভাষা।",
    "আমরা সবাই বাঙালি।",
    "এই বিশ্বটা খুব সুন্দর।",
    "শিক্ষা জাতির মেরুদণ্ড।",
    "আমাদের ঐতিহ্য ও সংস্কৃতি অনেক প্রাচীন।"
]

# Create a DataFrame from the sentences
df = pd.DataFrame(bengali_sentences, columns=["text"])

# Save the DataFrame to a CSV file
csv_file_path = "bengali_sentences.csv"
df.to_csv(csv_file_path, index=False, encoding='utf-8')

# Confirm the CSV file creation
print(f"CSV file created at: {csv_file_path}")

